"""
P√°gina de Gradua√ß√µes - Interface para gest√£o de gradua√ß√µes e promo√ß√µes
"""

import streamlit as st
from datetime import date, datetime, timedelta
from typing import Dict, List, Any
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from src.services.graduacoes_service import GraduacoesService
from src.services.alunos_service import AlunosService

def init_session_state():
    """Inicializa vari√°veis de sess√£o"""
    if 'graduacoes_modo_selecionado' not in st.session_state:
        st.session_state.graduacoes_modo_selecionado = "Registrar Gradua√ß√£o"
    
    if 'graduacoes_feedback_message' not in st.session_state:
        st.session_state.graduacoes_feedback_message = None
    
    if 'graduacoes_feedback_type' not in st.session_state:
        st.session_state.graduacoes_feedback_type = None

def exibir_registrar_graduacao():
    """Interface para registrar nova gradua√ß√£o"""
    st.subheader("üéì Registrar Nova Gradua√ß√£o")
    st.write("Registre promo√ß√µes e atualize gradua√ß√µes dos alunos")
    
    graduacoes_service = GraduacoesService()
    alunos_service = AlunosService()
    
    # Exibir feedback persistente se houver
    if st.session_state.graduacoes_feedback_message:
        if st.session_state.graduacoes_feedback_type == "success":
            st.success(st.session_state.graduacoes_feedback_message)
        elif st.session_state.graduacoes_feedback_type == "warning":
            st.warning(st.session_state.graduacoes_feedback_message)
        elif st.session_state.graduacoes_feedback_type == "error":
            st.error(st.session_state.graduacoes_feedback_message)
        
        # Bot√£o para limpar feedback
        if st.button("‚úÖ OK, entendi", key="clear_feedback_grad"):
            st.session_state.graduacoes_feedback_message = None
            st.session_state.graduacoes_feedback_type = None
            st.rerun()
    
    try:
        # Buscar alunos ativos
        alunos = alunos_service.listar_alunos()
        if not alunos:
            st.warning("Nenhum aluno cadastrado. Cadastre alunos primeiro.")
            return
        
        alunos.sort(key=lambda x: x.get('nome', ''))
        
        # Formul√°rio de gradua√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            # Sele√ß√£o de aluno
            opcoes_alunos = [f"{aluno['nome']} ({aluno.get('graduacao', 'Sem gradua√ß√£o')})" 
                           for aluno in alunos]
            
            aluno_escolhido = st.selectbox(
                "Selecione o aluno:",
                options=opcoes_alunos,
                key="grad_aluno_select"
            )
            
            # Data da gradua√ß√£o
            data_graduacao = st.date_input(
                "Data da gradua√ß√£o:",
                value=date.today(),
                key="grad_data"
            )
        
        with col2:
            # Novo n√≠vel
            niveis_disponiveis = graduacoes_service.obter_niveis_graduacao_disponiveis()
            
            novo_nivel = st.selectbox(
                "Novo n√≠vel:",
                options=niveis_disponiveis,
                key="grad_nivel"
            )
            
            # Observa√ß√µes
            observacoes = st.text_area(
                "Observa√ß√µes (opcional):",
                placeholder="Ex: Exame realizado com excel√™ncia, destacou-se em katas...",
                key="grad_obs"
            )
        
        # Bot√£o de registrar
        if st.button("üéì Registrar Gradua√ß√£o", type="primary", key="btn_registrar_grad"):
            if aluno_escolhido and novo_nivel:
                try:
                    # Encontrar aluno selecionado
                    indice_aluno = opcoes_alunos.index(aluno_escolhido)
                    aluno = alunos[indice_aluno]
                    
                    # Registrar gradua√ß√£o
                    grad_id = graduacoes_service.registrar_graduacao(
                        aluno['id'], 
                        novo_nivel, 
                        data_graduacao,
                        observacoes if observacoes.strip() else None
                    )
                    
                    st.session_state.graduacoes_feedback_message = f"üéì Gradua√ß√£o registrada com sucesso! {aluno['nome']} agora √© {novo_nivel}"
                    st.session_state.graduacoes_feedback_type = "success"
                    st.rerun()
                    
                except Exception as e:
                    st.session_state.graduacoes_feedback_message = f"Erro ao registrar gradua√ß√£o: {str(e)}"
                    st.session_state.graduacoes_feedback_type = "error"
                    st.rerun()
        
        # Candidatos √† promo√ß√£o
        st.markdown("---")
        st.subheader("üìã Candidatos √† Promo√ß√£o")
        
        try:
            candidatos = graduacoes_service.listar_candidatos_promocao()
            
            if candidatos:
                # Criar tabela de candidatos
                dados_candidatos = []
                for candidato in candidatos[:10]:  # Limitar a 10 para performance
                    dados_candidatos.append({
                        'Nome': candidato.get('nome', ''),
                        'Gradua√ß√£o Atual': candidato.get('graduacao_atual', ''),
                        '√öltima Gradua√ß√£o': candidato.get('data_ultima_graduacao', 'Nunca'),
                        'Meses desde √∫ltima': candidato.get('meses_desde_ultima', 'N/A'),
                        'Total Gradua√ß√µes': candidato.get('total_graduacoes', 0)
                    })
                
                if dados_candidatos:
                    df_candidatos = pd.DataFrame(dados_candidatos)
                    st.dataframe(df_candidatos, width=800, hide_index=True)
            else:
                st.info("Nenhum candidato √† promo√ß√£o encontrado no momento.")
                
        except Exception as e:
            st.error(f"Erro ao buscar candidatos: {str(e)}")
    
    except Exception as e:
        st.error(f"Erro ao carregar alunos: {str(e)}")

def exibir_timeline_aluno():
    """Interface para visualizar timeline de gradua√ß√µes de um aluno"""
    st.subheader("üìà Timeline de Gradua√ß√µes")
    
    graduacoes_service = GraduacoesService()
    alunos_service = AlunosService()
    
    try:
        # Buscar alunos
        alunos = alunos_service.listar_alunos()
        if not alunos:
            st.warning("Nenhum aluno cadastrado")
            return
        
        alunos.sort(key=lambda x: x.get('nome', ''))
        
        # Sele√ß√£o de aluno
        opcoes_alunos = [f"{aluno['nome']} ({aluno.get('graduacao', 'Sem gradua√ß√£o')})" 
                       for aluno in alunos]
        
        aluno_escolhido = st.selectbox(
            "Selecione o aluno:",
            options=opcoes_alunos,
            key="timeline_aluno_select"
        )
        
        if aluno_escolhido:
            # Encontrar aluno selecionado
            indice_aluno = opcoes_alunos.index(aluno_escolhido)
            aluno = alunos[indice_aluno]
            
            # Obter timeline
            try:
                timeline = graduacoes_service.obter_timeline_aluno(aluno['id'])
                
                # Exibir estat√≠sticas
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Total Gradua√ß√µes", timeline['total_graduacoes'])
                
                with col2:
                    graduacao_atual = timeline.get('graduacao_atual')
                    nivel_atual = graduacao_atual.get('nivel', 'Sem gradua√ß√£o') if graduacao_atual else 'Sem gradua√ß√£o'
                    st.metric("Gradua√ß√£o Atual", nivel_atual)
                
                with col3:
                    primeira = timeline.get('primeira_graduacao')
                    data_primeira = primeira.get('data', 'N/A') if primeira else 'N/A'
                    st.metric("Primeira Gradua√ß√£o", data_primeira)
                
                with col4:
                    tempo_total = timeline.get('tempo_total_dias', 0)
                    anos = round(tempo_total / 365.25, 1) if tempo_total > 0 else 0
                    st.metric("Tempo Total", f"{anos} anos")
                
                # Timeline visual
                if timeline['timeline']:
                    st.markdown("---")
                    st.subheader("üìä Progress√£o de Gradua√ß√µes")
                    
                    # Gr√°fico de timeline
                    dados_timeline = []
                    for i, grad in enumerate(timeline['timeline']):
                        if grad:  # Verificar se grad n√£o √© None
                            dados_timeline.append({
                                'Data': grad.get('data', ''),
                                'N√≠vel': grad.get('nivel', ''),
                                'Ordem': i + 1
                            })
                    
                    if dados_timeline:
                        df_timeline = pd.DataFrame(dados_timeline)
                        df_timeline['Data'] = pd.to_datetime(df_timeline['Data'])
                        
                        fig = px.line(
                            df_timeline, 
                            x='Data', 
                            y='Ordem',
                            title=f'Progress√£o de Gradua√ß√µes - {aluno["nome"]}',
                            markers=True
                        )
                        
                        # Adicionar anota√ß√µes com os n√≠veis
                        for i, row in df_timeline.iterrows():
                            fig.add_annotation(
                                x=row['Data'],
                                y=row['Ordem'],
                                text=row['N√≠vel'],
                                showarrow=True,
                                arrowhead=2,
                                arrowsize=1,
                                arrowwidth=2,
                                arrowcolor="blue"
                            )
                        
                        st.plotly_chart(fig, use_container_width=True)
                
                # Detalhes da progress√£o
                if timeline['progressao']:
                    st.markdown("---")
                    st.subheader("‚è±Ô∏è An√°lise de Progress√£o")
                    
                    for prog in timeline['progressao']:
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**{prog['de']}** ‚Üí **{prog['para']}**")
                        
                        with col2:
                            st.write(f"üìÖ {prog['data_inicial']} a {prog['data_final']}")
                        
                        with col3:
                            st.write(f"‚è≥ {prog['meses_aproximados']} meses ({prog['dias_entre']} dias)")
                
                # Hist√≥rico detalhado
                with st.expander("üìã Hist√≥rico Detalhado", expanded=False):
                    for grad in timeline['timeline']:
                        if grad:  # Verificar se grad n√£o √© None
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.write(f"**{grad.get('nivel', '')}**")
                            
                            with col2:
                                st.write(f"üìÖ {grad.get('data', '')}")
                            
                            with col3:
                                obs = grad.get('obs', '')
                                st.write(f"üìù {obs}" if obs else "Sem observa√ß√µes")
                
            except Exception as e:
                st.error(f"Erro ao obter timeline: {str(e)}")
    
    except Exception as e:
        st.error(f"Erro ao carregar alunos: {str(e)}")

def exibir_estatisticas_graduacoes():
    """Interface para estat√≠sticas gerais de gradua√ß√µes"""
    st.subheader("üìä Estat√≠sticas de Gradua√ß√µes")
    
    graduacoes_service = GraduacoesService()
    
    try:
        stats = graduacoes_service.obter_estatisticas_graduacoes()
        
        # Cards de estat√≠sticas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Alunos", stats['total_alunos'])
        
        with col2:
            st.metric("Alunos Graduados", stats['alunos_com_graduacoes'])
        
        with col3:
            st.metric("Total Promo√ß√µes", stats['total_promocoes'])
        
        with col4:
            st.metric("M√©dia Promo√ß√µes/Aluno", f"{stats['media_promocoes_por_aluno']:.1f}")
        
        # Gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribui√ß√£o por n√≠vel
            if stats['distribuicao_por_nivel']:
                fig_dist = px.pie(
                    values=list(stats['distribuicao_por_nivel'].values()),
                    names=list(stats['distribuicao_por_nivel'].keys()),
                    title='Distribui√ß√£o por Gradua√ß√£o'
                )
                st.plotly_chart(fig_dist, use_container_width=True)
        
        with col2:
            # Taxa de alunos graduados
            graduados = stats['alunos_com_graduacoes']
            nao_graduados = stats['total_alunos'] - graduados
            
            if graduados > 0 or nao_graduados > 0:
                fig_taxa = px.pie(
                    values=[graduados, nao_graduados],
                    names=['Com Gradua√ß√µes', 'Sem Gradua√ß√µes'],
                    title='Taxa de Alunos Graduados',
                    color_discrete_map={'Com Gradua√ß√µes': 'green', 'Sem Gradua√ß√µes': 'red'}
                )
                st.plotly_chart(fig_taxa, use_container_width=True)
        
        # Detalhes
        with st.expander("üìã Detalhes das Estat√≠sticas", expanded=False):
            st.write(f"**Taxa de alunos graduados:** {stats['taxa_alunos_graduados']:.1f}%")
            st.write(f"**N√≠vel mais comum:** {stats['nivel_mais_comum']}")
            
            st.write("**Distribui√ß√£o detalhada:**")
            for nivel, quantidade in stats['distribuicao_por_nivel'].items():
                porcentagem = (quantidade / stats['total_alunos']) * 100
                st.write(f"- {nivel}: {quantidade} alunos ({porcentagem:.1f}%)")
    
    except Exception as e:
        st.error(f"Erro ao obter estat√≠sticas: {str(e)}")

def exibir_candidatos_promocao():
    """Interface para gerenciar candidatos √† promo√ß√£o"""
    st.subheader("üèÜ Candidatos √† Promo√ß√£o")
    
    graduacoes_service = GraduacoesService()
    
    # Filtros
    col1, col2 = st.columns(2)
    
    with col1:
        meses_minimos = st.number_input(
            "Meses m√≠nimos desde √∫ltima gradua√ß√£o:",
            min_value=1,
            max_value=60,
            value=6,
            key="meses_minimos_filter"
        )
    
    try:
        filtros = {'meses_minimos_graduacao': meses_minimos}
        candidatos = graduacoes_service.listar_candidatos_promocao(filtros)
        
        if not candidatos:
            st.info("Nenhum candidato √† promo√ß√£o encontrado com os crit√©rios atuais.")
            return
        
        st.write(f"**{len(candidatos)} candidatos encontrados**")
        
        # Tabela de candidatos
        dados_tabela = []
        for candidato in candidatos:
            dados_tabela.append({
                'Nome': candidato.get('nome', ''),
                'Gradua√ß√£o Atual': candidato.get('graduacao_atual', ''),
                '√öltima Gradua√ß√£o': candidato.get('data_ultima_graduacao', 'Nunca'),
                'Meses desde √∫ltima': candidato.get('meses_desde_ultima', 'N/A'),
                'Dias desde √∫ltima': candidato.get('dias_desde_ultima', 'N/A'),
                'Total Gradua√ß√µes': candidato.get('total_graduacoes', 0)
            })
        
        if dados_tabela:
            df_candidatos = pd.DataFrame(dados_tabela)
            
            # Exibir tabela
            st.dataframe(
                df_candidatos,
                width=1200,
                hide_index=True
            )
            
            # Bot√£o para baixar CSV
            csv = df_candidatos.to_csv(index=False, encoding='utf-8')
            st.download_button(
                label="üì• Baixar CSV",
                data=csv,
                file_name=f"candidatos_promocao_{date.today().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
    
    except Exception as e:
        st.error(f"Erro ao carregar candidatos: {str(e)}")

def show_graduacoes():
    """Fun√ß√£o principal para exibir a p√°gina de gradua√ß√µes"""
    init_session_state()
    
    # T√≠tulo da p√°gina
    st.title("üéì Gest√£o de Gradua√ß√µes")
    st.markdown("Sistema de promo√ß√µes e controle de progress√£o dos alunos")
    
    # Navega√ß√£o por abas
    modos = [
        "Registrar Gradua√ß√£o",
        "Timeline por Aluno",
        "Estat√≠sticas Gerais",
        "Candidatos √† Promo√ß√£o"
    ]
    
    modo_selecionado = st.selectbox(
        "Selecione o modo:",
        options=modos,
        index=modos.index(st.session_state.graduacoes_modo_selecionado),
        key="modo_graduacoes"
    )
    
    st.session_state.graduacoes_modo_selecionado = modo_selecionado
    
    # Linha divis√≥ria
    st.divider()
    
    # Exibir interface baseada no modo selecionado
    if modo_selecionado == "Registrar Gradua√ß√£o":
        exibir_registrar_graduacao()
    
    elif modo_selecionado == "Timeline por Aluno":
        exibir_timeline_aluno()
    
    elif modo_selecionado == "Estat√≠sticas Gerais":
        exibir_estatisticas_graduacoes()
    
    elif modo_selecionado == "Candidatos √† Promo√ß√£o":
        exibir_candidatos_promocao()
    
    # Rodap√©
    st.markdown("---")
    st.markdown("üí° **Dica:** Use candidatos √† promo√ß√£o para identificar alunos prontos para avan√ßar de gradua√ß√£o")

def main():
    """Fun√ß√£o principal da p√°gina de gradua√ß√µes"""
    show_graduacoes()

if __name__ == "__main__":
    main()