"""
Sistema de Gest√£o para Academia/Dojo - MVP
Streamlit + Firestore + streamlit-authenticator

Author: GitHub Copilot
Version: 1.0.0-MVP
"""

import streamlit as st
import sys
import os
import time
import logging
from pathlib import Path
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/tmp/dojo_app.log', mode='a') if os.path.exists('/tmp') else logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('DojojApp')

def log_step(step_name, start_time=None):
    """Log de cada etapa com timing"""
    current_time = time.time()
    if start_time:
        duration = current_time - start_time
        logger.info(f"‚úÖ {step_name} - CONCLU√çDO em {duration:.2f}s")
    else:
        logger.info(f"üîÑ {step_name} - INICIANDO...")
    return current_time

# Adicionar src ao path para imports
logger.info("üöÄ INICIANDO APLICA√á√ÉO DOJO MANAGEMENT SYSTEM")
start_total = time.time()

step_start = log_step("Configura√ß√£o de imports")
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))
log_step("Configura√ß√£o de imports", step_start)

# Imports locais
step_start = log_step("Imports de m√≥dulos locais")
try:
    from utils.auth import AuthManager
    from utils.firebase_config import FirebaseConfig
    log_step("Imports de m√≥dulos locais", step_start)
except Exception as e:
    logger.error(f"‚ùå ERRO nos imports: {str(e)}")
    raise e

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    logger.info("üì± FUN√á√ÉO MAIN INICIADA")
    step_start = log_step("Verifica√ß√£o de ambiente Streamlit")
    
    # Verificar se est√° rodando corretamente
    if 'streamlit' not in sys.modules:
        logger.error("‚ùå Aplica√ß√£o N√ÉO est√° sendo executada com streamlit run")
        st.error("Aplica√ß√£o deve ser executada com 'streamlit run app.py'")
        return
    
    log_step("Verifica√ß√£o de ambiente Streamlit", step_start)
    
    # Configura√ß√£o da p√°gina
    step_start = log_step("Configura√ß√£o da p√°gina Streamlit")
    try:
        st.set_page_config(
            page_title="Dojo Management System",
            page_icon="ü•ã",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        log_step("Configura√ß√£o da p√°gina Streamlit", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao configurar p√°gina: {str(e)}")
        raise e
    
    # CSS customizado
    step_start = log_step("Aplica√ß√£o de CSS customizado")
    try:
        st.markdown("""
        <style>
        .main-header {
            background: linear-gradient(90deg, #FF6B35 0%, #F7931E 100%);
            padding: 1rem;
            border-radius: 10px;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
        }
        .metric-card {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 10px;
            border-left: 4px solid #FF6B35;
        }
        </style>
        """, unsafe_allow_html=True)
        log_step("Aplica√ß√£o de CSS customizado", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao aplicar CSS: {str(e)}")
        # Continuar mesmo com erro de CSS
    
    # Header principal
    step_start = log_step("Renderiza√ß√£o do header")
    try:
        st.markdown("""
        <div class="main-header">
            <h1>ü•ã Sistema de Gest√£o - Dojo</h1>
            <p>MVP - Academia de Muay Thai - v1.1</p>
        </div>
        """, unsafe_allow_html=True)
        log_step("Renderiza√ß√£o do header", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao renderizar header: {str(e)}")
    
    # Inicializar autentica√ß√£o
    step_start = log_step("Inicializa√ß√£o do sistema de autentica√ß√£o")
    try:
        auth_manager = AuthManager()
        log_step("Inicializa√ß√£o do sistema de autentica√ß√£o", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao inicializar autentica√ß√£o: {str(e)}")
        st.error("Erro cr√≠tico na autentica√ß√£o")
        return
    
    # Verificar autentica√ß√£o
    step_start = log_step("Verifica√ß√£o de autentica√ß√£o do usu√°rio")
    try:
        if not auth_manager.is_authenticated():
            logger.info("üë§ Usu√°rio n√£o autenticado - mostrando tela de login")
            auth_manager.show_login()
            return
        logger.info("‚úÖ Usu√°rio autenticado com sucesso")
        log_step("Verifica√ß√£o de autentica√ß√£o do usu√°rio", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao verificar autentica√ß√£o: {str(e)}")
        st.error("Erro ao verificar autentica√ß√£o")
        return
    
    # Inicializar Firebase com timeout
    firebase_config = None
    step_start = log_step("Inicializa√ß√£o do Firebase")
    try:
        logger.info("üîÑ Verificando vari√°veis de ambiente do Firebase...")
        
        # Verificar se as vari√°veis existem
        google_creds = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
        firebase_project = os.getenv("FIREBASE_PROJECT_ID")
        
        if not google_creds:
            logger.error("‚ùå GOOGLE_APPLICATION_CREDENTIALS n√£o encontrada")
            st.error("‚ùå Credenciais Firebase n√£o configuradas")
            st.info("üîÑ Continuando em modo degradado...")
        elif not firebase_project:
            logger.error("‚ùå FIREBASE_PROJECT_ID n√£o encontrada")
            st.error("‚ùå Project ID Firebase n√£o configurado")
            st.info("üîÑ Continuando em modo degradado...")
        else:
            logger.info(f"‚úÖ Vari√°veis encontradas - Project: {firebase_project}")
            logger.info("üîÑ Conectando ao Firebase...")
            
            firebase_config = FirebaseConfig()
            
            if firebase_config.is_connected():
                logger.info("‚úÖ Firebase conectado com sucesso!")
                log_step("Inicializa√ß√£o do Firebase", step_start)
            else:
                logger.warning("‚ö†Ô∏è Firebase n√£o conectou - modo degradado")
                st.error("‚ùå Erro na conex√£o com Firebase. Verifique as configura√ß√µes.")
                st.info("Trabalhando em modo offline...")
                
    except Exception as e:
        logger.error(f"‚ùå EXCE√á√ÉO ao conectar Firebase: {str(e)}")
        st.error(f"‚ùå Erro ao conectar com Firebase: {str(e)}")
        st.error("Verifique as vari√°veis de ambiente FIREBASE_PROJECT_ID e GOOGLE_APPLICATION_CREDENTIALS")
        st.info("üîÑ Continuando em modo degradado...")
        # N√£o retornar - continuar mesmo com erro do Firebase
    
    # Sidebar com navega√ß√£o
    step_start = log_step("Constru√ß√£o da sidebar e navega√ß√£o")
    try:
        with st.sidebar:
            st.markdown("### üìã Navega√ß√£o")
            
            # Logout
            if st.button("üö™ Logout", type="secondary"):
                logger.info("üë§ Usu√°rio fez logout")
                auth_manager.logout()
                st.rerun()
            
            st.divider()
            
            # Menu de navega√ß√£o
            page = st.selectbox(
                "Selecione uma p√°gina:",
                options=[
                    "üè† Dashboard", 
                    "üë• Alunos", 
                    "üí∞ Pagamentos", 
                    "‚úÖ Presen√ßas", 
                    "ü•ã Gradua√ß√µes", 
                    "üìã Planos"
                ]
            )
        log_step("Constru√ß√£o da sidebar e navega√ß√£o", step_start)
    except Exception as e:
        logger.error(f"‚ùå ERRO ao construir sidebar: {str(e)}")
        st.error("Erro na navega√ß√£o")
        return
    
    # Roteamento de p√°ginas
    step_start = log_step(f"Carregamento da p√°gina: {page}")
    try:
        if page == "üè† Dashboard":
            from pages.dashboard import show_dashboard
            show_dashboard()
        elif page == "üë• Alunos":
            from pages.alunos import show_alunos
            show_alunos()
        elif page == "üí∞ Pagamentos":
            from pages.pagamentos import show_pagamentos
            show_pagamentos()
        elif page == "‚úÖ Presen√ßas":
            from pages.presencas import show_presencas
            show_presencas()
        elif page == "ü•ã Gradua√ß√µes":
            from pages.graduacoes import show_graduacoes
            show_graduacoes()
        elif page == "üìã Planos":
            from pages.planos import show_planos
            show_planos()
        
        log_step(f"Carregamento da p√°gina: {page}", step_start)
        
        # Log final
        total_time = time.time() - start_total
        logger.info(f"üéâ APLICA√á√ÉO CARREGADA COM SUCESSO em {total_time:.2f}s")
        
    except Exception as e:
        logger.error(f"‚ùå ERRO ao carregar p√°gina {page}: {str(e)}")
        st.error(f"Erro ao carregar p√°gina: {str(e)}")
        return

if __name__ == "__main__":
    main()